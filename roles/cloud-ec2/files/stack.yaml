---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Algo VPN stack'
Parameters:
  CodeName:
    Type: String
  InstanceTypeParameter:
    Type: String
    Default: t3.micro
  PublicSSHKeyParameter:
    Type: String
  ImageIdParameter:
    Type: String
  WireGuardPort:
    Type: String
  UseThisElasticIP:
    Type: String
    Default: ''
  EbsEncrypted:
    Type: String
  UserData:
    Type: String
  SshPort:
    Type: String
  VPCCidr:
    Type: String
    AllowedPattern: "\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+"
  SubnetACidr:
    Type: String
    AllowedPattern: "\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+"
  SubnetBCidr:
    Type: String
    AllowedPattern: "\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+"
Conditions:
  AllocateNewEIP: !Equals [!Ref UseThisElasticIP, '']
  AssociateExistingEIP: !Not [!Equals [!Ref UseThisElasticIP, '']]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetACidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetBCidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  RouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  RouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  RouteA:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - RouteTableA
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteB:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - RouteTableB
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - RouteTableA
      - SubnetA
      - RouteA
    Properties:
      RouteTableId: !Ref RouteTableA
      SubnetId: !Ref SubnetA

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - SubnetA
      - SubnetB
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH and IPsec
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref SshPort
          ToPort: !Ref SshPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: !Ref WireGuardPort
          ToPort: !Ref WireGuardPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - SubnetA
      - InstanceSecurityGroup
    Properties:
      InstanceType:
        Ref: InstanceTypeParameter
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 8
            Encrypted: !Ref EbsEncrypted
      NetworkInterfaces:
        - DeviceIndex: '0'
          NetworkInterfaceId: !Ref ENI
      InstanceInitiatedShutdownBehavior: terminate
      ImageId:
        Ref: ImageIdParameter
      UserData: !Ref UserData
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetA
      GroupSet:
        - !Ref InstanceSecurityGroup

  ElasticIP:
    Type: AWS::EC2::EIP
    Condition: AllocateNewEIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance
    DependsOn:
      - EC2Instance
      - VPCGatewayAttachment

  ElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: AssociateExistingEIP
    Properties:
      AllocationId: !Ref UseThisElasticIP
      InstanceId: !Ref EC2Instance

  PeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: !ImportValue 'saraneth-core-vpcid'

  PeeringAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PeeringRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableA
      DestinationCidrBlock: !ImportValue 'saraneth-core-vpc-cidr'
      VpcPeeringConnectionId: !Ref PeeringConnection

  InversePeeringRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue 'saraneth-core-pub-route-table'
      DestinationCidrBlock: !Ref VPCCidr
      VpcPeeringConnectionId: !Ref PeeringConnection

  PeeringRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableB
      DestinationCidrBlock: !ImportValue 'saraneth-core-vpc-cidr'
      VpcPeeringConnectionId: !Ref PeeringConnection

  InversePeeringRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue 'saraneth-core-priv-route-table'
      DestinationCidrBlock: !Ref VPCCidr
      VpcPeeringConnectionId: !Ref PeeringConnection

  CollectorTrafficMirrorSession:
    Type: 'AWS::EC2::TrafficMirrorSession'
    DependsOn: EC2Instance
    Properties:
      NetworkInterfaceId: !Ref ENI
      TrafficMirrorTargetId: !ImportValue 'saraneth-core-mirror-target-id'
      TrafficMirrorFilterId: !ImportValue 'saraneth-core-mirror-filter-id'
      SessionNumber: 1

Outputs:
  ElasticIP:
    Value: !GetAtt [EC2Instance, PublicIp]
